"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchObjKeys = exports.getDeepKeys = exports.isObjPopulated = void 0;
const isObjPopulated = (obj, exceptions) => {
    if (typeof obj !== 'object' || Array.isArray(obj))
        throw new TypeError('Argument must be of type object');
    let isPopulated = true;
    for (const key in obj) {
        const nestedObj = obj?.[key];
        const nestedObjKeys = typeof obj[key] === 'object' && !Array.isArray(obj[key]) && Object.keys(obj[key] ?? {});
        if (nestedObjKeys && nestedObjKeys.length > 0) {
            for (let i = 0; i < nestedObjKeys.length; i++) {
                const nestedObjKey = String(nestedObjKeys[i]);
                const value = nestedObj[nestedObjKey];
                if (!value || value?.length === 0 || value === '') {
                    const keyIsInException = exceptions?.some(field => field === nestedObjKey);
                    if (!keyIsInException) {
                        isPopulated = false;
                    }
                }
            }
        }
        else if (!nestedObj || nestedObj?.length === 0 || nestedObj === '') {
            const keyIsInException = exceptions?.some(field => field === key);
            if (!keyIsInException) {
                isPopulated = false;
            }
        }
    }
    return isPopulated;
};
exports.isObjPopulated = isObjPopulated;
const getDeepKeys = (obj) => {
    if (typeof obj !== 'object' || Array.isArray(obj))
        throw new TypeError('Argument must be an object');
    let keys = [];
    for (let key in obj) {
        keys.push(key);
        if (Array.isArray(obj[key])) {
            obj[key].forEach(entry => {
                if (typeof entry === 'object') {
                    keys = [...keys, ...getDeepKeys(entry)];
                }
            });
        }
        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {
            keys = [...keys, ...getDeepKeys(obj[key])];
        }
    }
    return [...new Set(keys)];
};
exports.getDeepKeys = getDeepKeys;
const matchObjKeys = (object1, object2, omit) => {
    const object1Keys = getDeepKeys(object1);
    const object2Keys = getDeepKeys(object2);
    const errors = [];
    let isValid = true;
    const errorFields = [];
    object2Keys.forEach(obj2key => {
        const exists = object1Keys.includes(obj2key) || omit?.includes(obj2key);
        if (!exists) {
            isValid = false;
            errors.push(`${obj2key}`);
            errorFields.push(obj2key);
        }
    });
    errors.length > 0 && console.warn('Missing fields:', errors);
    return { isValid, errorFields };
};
exports.matchObjKeys = matchObjKeys;
//# sourceMappingURL=object-funcs.js.map